}else{A<-cbind(A,rep(NA, as.data.frame(length(A[,1]))))}
if(y <4){
colnames(A)[y+2]<-paste("R",y, sep="")}else{
colnames(A)[y+2]<-paste("S",y-3, sep="")
}
}
#names(A)<-c("x","AMS", "Typ1","Typ2","Typ3","Typ4","Typ5")
#Mischungsmodell
Q_mix_mix<-numeric()
# if(length(which(AnzT %in% rain))<1){
#   Q_mix_mix_rain<-rep(NA, length(Ta))
# }else{
#   for(i in 1:length(Ta)){
#     Q_mix_mix_rain[i]<-qPOT_mixmixPOT(Ta[i],params_POT,TH,params,antseas, AnzT[which(AnzT %in% rain)])
#      }
# }
# if(length(which(AnzT %in% snow))<1){
#   Q_mix_mix_snow<-rep(NA, length(Ta))
# }else{
#   for(i in 1:length(Ta)){
#     Q_mix_mix_snow[i]<-qPOT_mixmixPOT(Ta[i],params_POT,TH,params,antseas, AnzT[which(AnzT %in% snow)])
#   }
# }
if(length(AnzT)<1){
Q_mix_mix<-rep(NA, length(Ta))
}else{
for(i in 1:length(Ta)){
Q_mix_mix[i]<-qPOT_mixmixPOT(Ta[i],params_POT,TH,params,antseas, AnzT)
}
}
#plot
A=cbind(A,TMPS=Q_mix_mix)
B=melt(A,id.vars="x")
B$Variable=as.factor(B$variable)
#cols<-c("black", "red", "blue", "green","cornflowerblue","grey50","darkred","darkblue","darkorchid1")
cols<-c("black",brewer.pal(n = (max(rain)+2), name = "RdYlGn")[-c(3,4)],brewer.pal(n = (length(snow)+2), name = "Blues")[-c(1,2)],  "darkorchid1")
tit=paste("MPS-Verteilung und Mischverteilungen der einzelnen Typen, sowie AMS", sep="")
gg=ggplot(data=B, aes(x=x, y=value, colour = Variable))+ geom_line(size=1.5)+ theme_bw()+
scale_x_log10()+labs(x="T[a]",y="Peak [m?/s]",title="")+
theme(plot.title = element_text(size=12,hjust = 0.5),legend.position = c(0.1, 0.8))+
annotation_logticks(sides = "b")+
scale_color_manual(values=cols)
print(gg)
ggsave(paste("V:/Typisierung_Bayern/TMPS/Plots/",pegel,".png",sep=""))
}
#return info
R=list()
if(!is.null(return_period)){
if (!is.null(T) ){
P=list()
#browser()
R=list()
for (ii in 1:length(T)){
if(T %in% AnzT){
R[[ii]]=as.numeric(qgev(1-1/return_period, xi=params_POT[[T[ii]]][1], beta=params_POT[[T[ii]]][2]*
lambda[[T[ii]]]^params_POT[[T[ii]]][1], mu=TH[[T[ii]]]-(params_POT[[T[ii]]][2]
*(1-lambda[[T[ii]]]^params_POT[[T[ii]]][1]))/params_POT[[T[ii]]][1]))
}else{
R[[ii]]<-rep(NA, length(return_period))
}
}
}else if (is.null(T)){
P=list()
R[[1]]=sapply(return_period, function(x) qPOT_mixmixPOT(x,params_POT,TH,params,antseas, AnzT))
#R[[2]]=sapply(return_period, function(x) qPOT_mixmixPOT(x,params_POT,TH,params,antseas, AnzT[which(AnzT %in% rain)]))
#R[[3]]=sapply(return_period, function(x) qPOT_mixmixPOT(x,params_POT,TH,params,antseas, AnzT[which(AnzT %in% snow)]))
}
return(list(R=R,P=P))
}
}
#kleine Funktionen
split.along.dim <- function(a, n)
setNames(lapply(split(a, arrayInd(seq_along(a), dim(a))[, n]),
array, dim = dim(a)[-n], dimnames(a)[-n]),
dimnames(a)[[n]])
#Mischungsmodel
qPOT_mixmixPOT<-function(Ta,params_POT,TH,params,antseas, AnzT){
uniroot_NA(optfun_mixmixPOT,Ta=Ta,params_POT=params_POT,TH=TH,params=params,antseas=antseas, AnzT=AnzT, interval=c(0,10000000))$root
}
optfun_mixmixPOT<-function(x,Ta,params_POT,TH,params,antseas, AnzT){
MixmixPOT(x,params_POT,TH,params,antseas, AnzT)-(1-(1/Ta))
}
MixmixPOT<-function(x,params_POT,TH,params,antseas, AnzT){
1-1/TmixPOT(x,params_POT,TH,params,antseas, AnzT)
}
TmixPOT<-function(x,params_POT,TH,params,antseas, AnzT){
optim(10,optquan_v2, x=x,params_POT=params_POT,TH=TH,params=params,antseas=antseas, AnzT=AnzT,method="Brent",lower=0,upper=1000000000)$par
}
optquan_v2<-function(x,Ta,params_POT,TH,params,antseas, AnzT){
abs((1-mixPOT2(x,params_POT,TH,params,antseas,AnzT))-1/(Ta))
}
# mixPOT<-function(x,params_POT,TH,params,antseas, AnzT){
#   res<-0
#   for(i in AnzT){
#     res<-res+(1-pgpd(x,xi=params_POT[[i]][1], mu=TH[[i]], beta=params_POT[[i]][2]))*(1-pgev(TH[[i]], xi=params[[i]][1], mu=params[[i]][2], beta=params[[i]][3]))*antseas[i]
#
#   }
#   return(as.numeric(1-res))
# }
mixPOT2<-function(x,params_POT,TH,params,antseas, AnzT){
res<-1
for(i in AnzT){
res<-res*(pgev(TH[[i]], xi=params[[i]][1], mu=params[[i]][2], beta=params[[i]][3])+(pgpd(x,xi=params_POT[[i]][1], mu=TH[[i]], beta=params_POT[[i]][2]))*(1-pgev(TH[[i]], xi=params[[i]][1], mu=params[[i]][2], beta=params[[i]][3])))
}
return(as.numeric(res))
}
SMPS_1<-SMPS_Main(daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, do_plot=FALSE, T=1)$R
SMPS_1
#New
daily_in <- daily[,1:2]
names(daily_in) <- c("Date", "Discharge")
daten_in <- daten
names(daten_in) <- c("Peak_date", "HQ", "Type", "Monat", "Jahr")
ret_NEW <- qTMPS(Flood_events = daten_in, Daily_discharge = daily_in, return_TMPS = c("R1"))
ret_NEW
AMS_params<-gevFit(AMS, type="pwm")@fit$par.ests
AMS=qgev(1-1/Ta, mu=AMS_params[2], xi=AMS_params[1], beta=AMS_params[3])
AMS
TA <- c(2, 5, 10, 20, 25, 50, 100, 200, 500, 1000)
AMS=qgev(1-1/TA, mu=AMS_params[2], xi=AMS_params[1], beta=AMS_params[3])
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, do_plot=FALSE, T=1)$R
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, T=1)$R
SMPS_1
ret_NEW <- pTMPS(AMS, Flood_events = daten_in, Daily_discharge = daily_in, return_TMPS = c("R1"))
ret_NEW
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow)$R
SMPS_1
ret_NEW <- pTMPS(AMS, Flood_events = daten_in, Daily_discharge = daily_in, return_TMPS = c("SMPS"))
ret_NEW <- pTMPS(AMS, Flood_events = daten_in, Daily_discharge = daily_in, return_TMPS = c("TMPS"))
ret_NEW
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, T=2)$R
ret_NEW <- pTMPS(AMS, Flood_events = daten_in, Daily_discharge = daily_in, return_TMPS = c("R2"))
SMPS_1
ret_NEW
library(fExtremes)
library(dplyr)
library(colorspace)
library(RColorBrewer)
hydroyear<-function(daten){
if(is.na(daten[,1])){return(NA)}else{
if(as.numeric(as.character(format(daten[,1],"%m")))>10){return(as.numeric(as.character(format(daten[,1],"%Y")))+1)}else{
return(as.numeric(as.character(format(daten[,1],"%Y"))))
}
}
}
uniroot_NA<-function(f, interval,...){
tryCatch({uniroot(f, interval,...)}, error=function(e){return(data.frame(root=NA))})
}
SMPS_probs<-function(x,daten,dailyMQ,AMS,pegel,rain=c(1:4),snow=c(5:6),T=NULL){
library(reshape2)
#daten<-read.csv(file="QVolumenElend.csv", sep=";", header=TRUE)
#dailyMQ<-read.csv2(file="QTgM_Elend.csv", sep=";", header=TRUE, na.strings = "NaN",skip=17)
#dailyMQ$Datum<-as.Date(dailyMQ$Datum, format="%d. %m. %Y")
#AMS= read.table(file="Elend_AMS.txt", header=TRUE)
g_const=seq(from=1, to=length(c(rain,snow)))
types=list()
GG=list()
n=list()
TH=list()
params=list()
params_POT=list()
HqmixPOT_1=list()
Q_mix_POT=list()
lambda=list()
HqmixPOT=list()
antseas=list()
nyear=list()
HqmixPOT_comb_typ=list()
AnzT=list()
AMS_params<-gevFit(AMS, type="pwm")@fit$par.ests
for (i in g_const){
types[[i]]=data.frame(Monat=daten$Monat[daten$Typ==i],HQ=daten$HQ[daten$Typ==i])
}
MonatsMQ<-data.frame(Jan=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==1],na.rm = TRUE), Feb=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==2],na.rm = TRUE),
Mar=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==3],na.rm = TRUE), Apr=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==4],na.rm = TRUE),
May=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==5],na.rm = TRUE), Jun=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==6],na.rm = TRUE),
Jul=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==7],na.rm = TRUE), Aug=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==8],na.rm = TRUE),
Sep=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==9],na.rm = TRUE), Okt=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==10],na.rm = TRUE),
Nov=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==11],na.rm = TRUE), Dec=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==12],na.rm = TRUE))
g<-g_const
GG=list()
n=list()
TH=list()
params=list()
params_POT=list()
lambda=list()
T_mixPOT=list()
g_help<-g
for(i in g){
if(length(types[[i]]$HQ)<3){
g_help<-g_help[-which(g_help==i)]
}
}
g<-g_help
AnzT<-g
for (i in g){
GG[[i]]<-data.frame(Month=types[[i]]$Monat ,
HQ=types[[i]]$HQ)
}
for (i in g){
n[[i]]=length(GG[[i]][,1])
}
for (i in g){
TH[[i]]<-0
for(j in 1:12){
TH[[i]]<-TH[[i]]+length(GG[[i]]$HQ[GG[[i]]$Month==j])/n[[i]]*MonatsMQ[[j]]
}
TH[[i]]<-as.numeric(TH[[i]]*3)
}
for(f in g){
if(all(GG[[f]]$HQ<TH[[f]])){
AnzT<-AnzT[-which(AnzT==f)]
}
}
g<-AnzT
antseas<-sapply(n, function(x)  x /Reduce("+", n))
nyear<-max(daten$Jahr[daten$Monat==10])  -  min(daten$Jahr[daten$Monat==11])+1
print(nyear)
for(i in g){
params_POT[[i]]<-gpdFit(GG[[i]]$HQ, type="pwm",u=TH[[i]])@fit$par.ests
params[[i]]<-gevFit(GG[[i]]$HQ, type="pwm")@fit$par.ests
}
##Einzelwkeit##
for (i in g){
lambda[[i]]=1/nyear*length(GG[[i]]$HQ[GG[[i]]$HQ>TH[[i]]])
}
#return info
R=list()
if (!is.null(T) ){
P=list()
#browser()
R=list()
for (ii in 1:length(T)){
if(T %in% AnzT){
R[[ii]]=as.numeric(1/(1-pgev(x, xi=params_POT[[T[ii]]][1], beta=params_POT[[T[ii]]][2]*
lambda[[T[ii]]]^params_POT[[T[ii]]][1], mu=TH[[T[ii]]]-(params_POT[[T[ii]]][2]
*(1-lambda[[T[ii]]]^params_POT[[T[ii]]][1]))/params_POT[[T[ii]]][1])))
}else{
R[[i]]<-rep(NA, length(x))
}
}
}else if (is.null(T)){
P=list()
AnzRain<-AnzT[rain]
AnzRain<-AnzRain[!is.na(AnzRain)]
AnzSnow<-AnzT[snow]
AnzSnow<-AnzSnow[!is.na(AnzSnow)]
if(length(which(AnzT %in% rain))<1){
R[[2]]<-rep(NA, length(Ta))
}else{
R[[2]]=sapply(x, function(y) 1/(1-MixmixPOT(y,params_POT,TH,params,antseas, AnzRain)))
}
if(length(which(AnzT %in% snow))<1){
R[[3]]<-rep(NA, length(Ta))
}else{
R[[3]]=sapply(x, function(y) 1/(1-MixmixPOT(y,params_POT,TH,params,antseas, AnzSnow)))
}
if(length(AnzT)<1){
R[[1]]<-rep(NA, length(Ta))
}else{
R[[1]]=sapply(x, function(y) 1/(1-MixmixPOT(y,params_POT,TH,params,antseas, AnzT)))
}
}
return(list(R=R,P=P))
}
SMPS_Main<-function(daten,dailyMQ,AMS,pegel,rain=c(1:4),snow=c(5:6),return_period=NULL,T=NULL,do_plot=FALSE){
library(reshape2)
#daten<-read.csv(file="QVolumenElend.csv", sep=";", header=TRUE)
#dailyMQ<-read.csv2(file="QTgM_Elend.csv", sep=";", header=TRUE, na.strings = "NaN",skip=17)
#dailyMQ$Datum<-as.Date(dailyMQ$Datum, format="%d. %m. %Y")
#AMS= read.table(file="Elend_AMS.txt", header=TRUE)
g_const=seq(from=1, to=length(c(rain,snow)))
Ta<-c(2,5,10,20,25,50,100,200,500,1000) #Ta <- 1+ 1 * 2^(0:10)#seq(2,1002,10)
if(is.null(return_period)){
return_period=Ta
}
types=list()
GG=list()
n=list()
TH=list()
params=list()
params_POT=list()
HqmixPOT_1=list()
Q_mix_POT=list()
Ta_mix_POT_AEV=list()
lambda=list()
HqmixPOT=list()
antseas=list()
nyear=list()
HqmixPOT_comb_typ=list()
AnzT=list()
AMS_params<-gevFit(AMS, type="pwm")@fit$par.ests
AMS=qgev(1-1/Ta, mu=AMS_params[2], xi=AMS_params[1], beta=AMS_params[3])
for (i in g_const){
types[[i]]=data.frame(Monat=daten$Monat[daten$Typ==i],HQ=daten$HQ[daten$Typ==i])
}
MonatsMQ<-data.frame(Jan=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==1],na.rm = TRUE), Feb=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==2],na.rm = TRUE),
Mar=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==3],na.rm = TRUE), Apr=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==4],na.rm = TRUE),
May=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==5],na.rm = TRUE), Jun=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==6],na.rm = TRUE),
Jul=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==7],na.rm = TRUE), Aug=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==8],na.rm = TRUE),
Sep=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==9],na.rm = TRUE), Okt=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==10],na.rm = TRUE),
Nov=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==11],na.rm = TRUE), Dec=mean(dailyMQ$dailyMQ[as.numeric(format(dailyMQ$Datum, "%m"))==12],na.rm = TRUE))
g<-g_const
GG=list()
n=list()
TH=list()
params=list()
params_POT=list()
lambda=list()
HqmixPOT=list()
g_help<-g
for(i in g){
if(length(types[[i]]$HQ)<3){
g_help<-g_help[-which(g_help==i)]
}
}
g<-g_help
AnzT<-g
for (i in g){
GG[[i]]<-data.frame(Month=types[[i]]$Monat ,
HQ=types[[i]]$HQ)
}
for (i in g){
n[[i]]=length(GG[[i]][,1])
}
for (i in g){
TH[[i]]<-0
for(j in 1:12){
TH[[i]]<-TH[[i]]+length(GG[[i]]$HQ[GG[[i]]$Month==j])/n[[i]]*MonatsMQ[[j]]
}
TH[[i]]<-as.numeric(TH[[i]]*3)
}
for(f in g){
if(all(GG[[f]]$HQ<TH[[f]])){
AnzT<-AnzT[-which(AnzT==f)]
}
}
g<-AnzT
antseas<-sapply(n, function(x)  x /Reduce("+", n))
nyear<-max(daten$Jahr)  -  min(daten$Jahr)+1
print(nyear)
for(i in g){
params_POT[[i]]<-gpdFit(GG[[i]]$HQ, type="pwm",u=TH[[i]])@fit$par.ests
params[[i]]<-gevFit(GG[[i]]$HQ, type="pwm")@fit$par.ests
}
##Einzelwkeit##
for (i in g){
lambda[[i]]=1/nyear*length(GG[[i]]$HQ[GG[[i]]$HQ>TH[[i]]])
}
if (do_plot==TRUE){
library(ggplot2)
for (i in AnzT){
HqmixPOT[[i]]=qgev(1-1/Ta, xi=params_POT[[i]][1], beta=params_POT[[i]][2]*
lambda[[i]]^params_POT[[i]][1], mu=TH[[i]]-(params_POT[[i]][2]
*(1-lambda[[i]]^params_POT[[i]][1]))/params_POT[[i]][1])
HqmixPOT[[i]][HqmixPOT[[i]]<0]<-NA
}
#plot
A=data.frame(x=Ta,AMS=AMS)
for(y in g_const){
if(y %in% AnzT){
A<-cbind(A, as.data.frame(HqmixPOT[[y]]))
}else{A<-cbind(A,rep(NA, as.data.frame(length(A[,1]))))}
if(y <4){
colnames(A)[y+2]<-paste("R",y, sep="")}else{
colnames(A)[y+2]<-paste("S",y-3, sep="")
}
}
#names(A)<-c("x","AMS", "Typ1","Typ2","Typ3","Typ4","Typ5")
#Mischungsmodell
Q_mix_mix<-numeric()
# if(length(which(AnzT %in% rain))<1){
#   Q_mix_mix_rain<-rep(NA, length(Ta))
# }else{
#   for(i in 1:length(Ta)){
#     Q_mix_mix_rain[i]<-qPOT_mixmixPOT(Ta[i],params_POT,TH,params,antseas, AnzT[which(AnzT %in% rain)])
#      }
# }
# if(length(which(AnzT %in% snow))<1){
#   Q_mix_mix_snow<-rep(NA, length(Ta))
# }else{
#   for(i in 1:length(Ta)){
#     Q_mix_mix_snow[i]<-qPOT_mixmixPOT(Ta[i],params_POT,TH,params,antseas, AnzT[which(AnzT %in% snow)])
#   }
# }
if(length(AnzT)<1){
Q_mix_mix<-rep(NA, length(Ta))
}else{
for(i in 1:length(Ta)){
Q_mix_mix[i]<-qPOT_mixmixPOT(Ta[i],params_POT,TH,params,antseas, AnzT)
}
}
#plot
A=cbind(A,TMPS=Q_mix_mix)
B=melt(A,id.vars="x")
B$Variable=as.factor(B$variable)
#cols<-c("black", "red", "blue", "green","cornflowerblue","grey50","darkred","darkblue","darkorchid1")
cols<-c("black",brewer.pal(n = (max(rain)+2), name = "RdYlGn")[-c(3,4)],brewer.pal(n = (length(snow)+2), name = "Blues")[-c(1,2)],  "darkorchid1")
tit=paste("MPS-Verteilung und Mischverteilungen der einzelnen Typen, sowie AMS", sep="")
gg=ggplot(data=B, aes(x=x, y=value, colour = Variable))+ geom_line(size=1.5)+ theme_bw()+
scale_x_log10()+labs(x="T[a]",y="Peak [m?/s]",title="")+
theme(plot.title = element_text(size=12,hjust = 0.5),legend.position = c(0.1, 0.8))+
annotation_logticks(sides = "b")+
scale_color_manual(values=cols)
print(gg)
ggsave(paste("V:/Typisierung_Bayern/TMPS/Plots/",pegel,".png",sep=""))
}
#return info
R=list()
if(!is.null(return_period)){
if (!is.null(T) ){
P=list()
#browser()
R=list()
for (ii in 1:length(T)){
if(T %in% AnzT){
R[[ii]]=as.numeric(qgev(1-1/return_period, xi=params_POT[[T[ii]]][1], beta=params_POT[[T[ii]]][2]*
lambda[[T[ii]]]^params_POT[[T[ii]]][1], mu=TH[[T[ii]]]-(params_POT[[T[ii]]][2]
*(1-lambda[[T[ii]]]^params_POT[[T[ii]]][1]))/params_POT[[T[ii]]][1]))
}else{
R[[ii]]<-rep(NA, length(return_period))
}
}
}else if (is.null(T)){
P=list()
R[[1]]=sapply(return_period, function(x) qPOT_mixmixPOT(x,params_POT,TH,params,antseas, AnzT))
#R[[2]]=sapply(return_period, function(x) qPOT_mixmixPOT(x,params_POT,TH,params,antseas, AnzT[which(AnzT %in% rain)]))
#R[[3]]=sapply(return_period, function(x) qPOT_mixmixPOT(x,params_POT,TH,params,antseas, AnzT[which(AnzT %in% snow)]))
}
return(list(R=R,P=P))
}
}
#kleine Funktionen
split.along.dim <- function(a, n)
setNames(lapply(split(a, arrayInd(seq_along(a), dim(a))[, n]),
array, dim = dim(a)[-n], dimnames(a)[-n]),
dimnames(a)[[n]])
#Mischungsmodel
qPOT_mixmixPOT<-function(Ta,params_POT,TH,params,antseas, AnzT){
uniroot_NA(optfun_mixmixPOT,Ta=Ta,params_POT=params_POT,TH=TH,params=params,antseas=antseas, AnzT=AnzT, interval=c(0,10000000))$root
}
optfun_mixmixPOT<-function(x,Ta,params_POT,TH,params,antseas, AnzT){
MixmixPOT(x,params_POT,TH,params,antseas, AnzT)-(1-(1/Ta))
}
MixmixPOT<-function(x,params_POT,TH,params,antseas, AnzT){
1-1/TmixPOT(x,params_POT,TH,params,antseas, AnzT)
}
TmixPOT<-function(x,params_POT,TH,params,antseas, AnzT){
optim(10,optquan_v2, x=x,params_POT=params_POT,TH=TH,params=params,antseas=antseas, AnzT=AnzT,method="Brent",lower=0,upper=1000000000)$par
}
optquan_v2<-function(x,Ta,params_POT,TH,params,antseas, AnzT){
abs((1-mixPOT2(x,params_POT,TH,params,antseas,AnzT))-1/(Ta))
}
# mixPOT<-function(x,params_POT,TH,params,antseas, AnzT){
#   res<-0
#   for(i in AnzT){
#     res<-res+(1-pgpd(x,xi=params_POT[[i]][1], mu=TH[[i]], beta=params_POT[[i]][2]))*(1-pgev(TH[[i]], xi=params[[i]][1], mu=params[[i]][2], beta=params[[i]][3]))*antseas[i]
#
#   }
#   return(as.numeric(1-res))
# }
mixPOT2<-function(x,params_POT,TH,params,antseas, AnzT){
res<-1
for(i in AnzT){
res<-res*(pgev(TH[[i]], xi=params[[i]][1], mu=params[[i]][2], beta=params[[i]][3])+(pgpd(x,xi=params_POT[[i]][1], mu=TH[[i]], beta=params_POT[[i]][2]))*(1-pgev(TH[[i]], xi=params[[i]][1], mu=params[[i]][2], beta=params[[i]][3])))
}
return(as.numeric(res))
}
SMPS_1<-SMPS_Main(daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, do_plot=FALSE, T=1)$R
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, T=2)$R
source('V:/GitHub_Repos/SMPS_MAIN.R')
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, T=2)$R
daten$Jahr
diff(range(daten$Jahr))
max(daten$Jahr[daten$Monat==10])
min(daten$Jahr[daten$Monat==11])+1
()
daten
source('V:/GitHub_Repos/SMPS_MAIN.R')
source('V:/GitHub_Repos/SMPS_MAIN.R')
SMPS_1<-SMPS_probs(AMS, daten_num, daily, AMS, pegel= "teste", rain=rain, snow=snow, T=2)$R
SMPS_1
ret_NEW <- pTMPS(AMS, Flood_events = daten_in, Daily_discharge = daily_in, return_TMPS = c("R2"))
ret_NEW
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
