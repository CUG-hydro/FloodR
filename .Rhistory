devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(FloodR)
Rcpp::compileAttributes()
devtools::document()
Rcpp::loadModule("leastSqrRegression", TRUE)
Rcpp::loadModule("leastSqrRegression", TRUE)
Rcpp::compileAttributes()
devtools::document()
devtools::document()
library(FloodR)
tools::texi2pdf()
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"), "C:/Program Files/Miktex/miktex/bin/x64/",sep=";"))
tools::texi2pdf()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
knit_with_parameters('D:/Packages/FloodR/Readme.Rmd')
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
my.fread("U:/Floods.csv")
source("U:/R_files/Flood_separation_SPATE/functions.R")
my.fread("U:/Floods.csv")
x <- my.fread("U:/Floods.csv")
save(x, file="data/Sample_Flood_events.RData")
save(as.data.frame(x), file="data/Sample_Flood_events.RData")
x=as.data.frame(x)
save(x, file="data/Sample_Flood_events.RData")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
save(x, file="data/Sample_Flood_events.RData")
Sample_Flood_events<- x
save(Sample_Flood_events, file="data/Sample_Flood_events.RData")
devtools::document()
devtools::document()
devtools::build_manual()
data("data/Sample_Flood_events")
library("FloodR")
data("data/Sample_Flood_events")
data("Sample_Flood_events")
head(Sample_Flood_events)
Floods_typed <- make_typing_of_floods(Floods_all = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
Sample_Flood_events
library(FloodR)
library("FloodR")
data("Sample_Flood_events")
head(Sample_Flood_events)
Floods_typed <- make_typing_of_floods(Floods_all = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
#' (like precipitation, snow-melt and peak-value) for creating a typology for the whole set of flood events
#'
#'
#' @param Floods_all data.frame or data.table: Table with Floods, including the columns
#' @param n_G integer: Number of rain flood-types, defaults to 3
#' @param fast_composition logical: Upper Threshold
#' @param Type_3_min_samplesize integer: Lower Threshold
#' @param R_Seed integer: NULL or the length of the gap in which NA-values are interpolated
#' @author Philipp Bühler
#' @export make_typing_of_floods
make_typing_of_floods <- function(Floods_all, n_G = 3L, fast_composition = FALSE,
Type_3_min_samplesize = NULL, R_Seed = NULL){
Floods_all <- data.table::as.data.table(Floods_all)
stopifnot(all(c("Sum_SM", "Sum_N", "dir_Volume", "HQ_dir","PSI_SM") %in% names(Floods_all)))
Floods_all[,SM_rel := Sum_SM/(Sum_SM+Sum_N)]
Floods_all <- Floods_all[order(Floods_all$TQDir),]
Floods_all$ID <- 1:nrow(Floods_all)
Floods_all_ref <- Floods_all
Floods_all <- Floods_all[!is.na(HQ_dir)]
#Regen Ereignisse
Floods_R <- Floods_all[SM_rel<0.2][,Typ:=factor(NA,levels = paste0("R", 1:n_G))]
n <- nrow(Floods_R)
#Welche M?glichkeiten gibt es, die Floods_R in n_G Gruppen zu unterteilen?
if(fast_composition){
mat <- t(as.matrix(partitions::compositions(as.integer(n), as.integer(n_G), include.zero = FALSE)))
}else{
mat <- n_ways(as.integer(n), as.integer(n_G))
}
if(is.null(Type_3_min_samplesize)){
min_sampleSize <- ceiling(n/(n_G*2))
mat <- mat[apply(mat,1,function(x) all(x >= min_sampleSize)),]
}else{
min_sampleSize <- c(rep(ceiling(n/(n_G*2)), (n_G-1)), Type_3_min_samplesize)
mat <- mat[apply(mat,1,function(x) all(x >= min_sampleSize)),]
}
Comb <- cbind(0, mat)
Comb <- t(apply(Comb, 1, cumsum))
OUT <- leastSqrRegression(Floods_R$HQ_dir, Floods_R$dir_Volume, Comb, intercept_zero = TRUE)
R2_mat <- OUT[[3]]
r2_sums <- rowSums(R2_mat) #r^2 innerhalb Unterteilungen addieren
optlen <- mat[which.max(r2_sums),] # welche Unterteilung gibt das max. r^2?
opt_R2 <- R2_mat[which.max(r2_sums),]
opt_slope <- OUT[[2]][which.max(r2_sums),]
optind <- cumsum(c(1, optlen))
cut_labz <- cut(1:nrow(Floods_R),optind,include.lowest = TRUE)
Floods_R$Typ <- factor(cut_labz, labels =  paste0("R", 1:n_G))
#Schnee Ereignisse
Floods_S <- Floods_all[SM_rel>=0.2,][,Typ:=factor(NA,levels = c("S1","S2"))]
if(nrow(Floods_S) > 2){
cluster_daten <- Floods_S[,.(Sum_N, Sum_SM, PSI_SM)]
cluster_daten <- cluster_daten  # [1:(nrow(cluster_daten)-3)]
if(!is.null(R_Seed)) set.seed(R_Seed)
types <- kmeans(cluster_daten, centers=2)
Floods_S$Typ <- paste0("S", types$cluster)
G <- Floods_S[,.(Mean_N=mean(Sum_N), Mean_SM=mean(Sum_SM), mean_PSI = mean(PSI_SM)),by=Typ]
statz <- apply(as.matrix(G[,.(Mean_N, Mean_SM, mean_PSI)]),2, function(x) which.min(x))
if(sum(statz==1)>=1 & G$Typ[1] =="S2") Floods_S$Typ <- fifelse(Floods_S$Typ=="S1","S2","S1")
}
Floods_res <- rbind(Floods_R,Floods_S)[order(Begin)]
Floods_all_ref <- merge(Floods_all_ref, Floods_res[,.(Typ, ID)], by="ID", all.x=TRUE,sort=FALSE)[order(Begin)]
Floods_all_ref <- Floods_all_ref[,-"ID"]
return(Floods_all_ref)
}
source('D:/Packages/FloodR/R/Flood_Typing.R', encoding = 'UTF-8')
Floods_typed <- make_typing_of_floods(Floods_all = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
library(Rcpp)
sourceCpp("U:/R_files/Flood_separation_SPATE/TQ_optim.cpp")
Floods_typed <- make_typing_of_floods(Floods_all = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
as.data.table
Sample_Flood_events
source('D:/Packages/FloodR/R/Flood_Typing.R', encoding = 'UTF-8')
source('D:/Packages/FloodR/R/Flood_Typing.R', encoding = 'UTF-8')
devtools::build_manual()
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/Miktex/miktex/bin/x64/",sep=";"))
devtools::build_manual()
library(FloodR)
data("Sample_Flood_events")
head(Sample_Flood_events)
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
make_typing_of_floods
Floods_all <- data.table::as.data.table(Sample_Flood_events)
Sample_Flood_events
Floods_all
Floods_all[,SM_rel := Sum_SM/(Sum_SM+Sum_N)]
#' (like precipitation, snow-melt and peak-value) for creating a typology for the whole set of flood events
#'
#'
#' @param Floods data.frame or data.table: Table with Floods, including the columns
#' @param n_G integer: Number of rain flood-types, defaults to 3
#' @param fast_composition logical: Upper Threshold
#' @param Type_3_min_samplesize integer: Lower Threshold
#' @param R_Seed integer: NULL or the length of the gap in which NA-values are interpolated
#' @author Philipp Bühler
#' @export make_typing_of_floods
make_typing_of_floods <- function(Floods, n_G = 3L, fast_composition = FALSE,
Type_3_min_samplesize = NULL, R_Seed = NULL){
Floods_all <- data.table::as.data.table(Floods)
stopifnot(all(c("Sum_SM", "Sum_N", "dir_Volume", "HQ_dir","PSI_SM", "TQDir") %in% names(Floods_all)))
Floods_all[,SM_rel := Sum_SM/(Sum_SM+Sum_N)]
Floods_all <- Floods_all[order(Floods_all$TQDir),]
Floods_all$ID <- 1:nrow(Floods_all)
Floods_all_ref <- Floods_all
Floods_all <- Floods_all[!is.na(HQ_dir)]
#Regen Ereignisse
Floods_R <- Floods_all[SM_rel<0.2][,Typ:=factor(NA,levels = paste0("R", 1:n_G))]
n <- nrow(Floods_R)
#Welche M?glichkeiten gibt es, die Floods_R in n_G Gruppen zu unterteilen?
if(fast_composition){
mat <- t(as.matrix(partitions::compositions(as.integer(n), as.integer(n_G), include.zero = FALSE)))
}else{
mat <- n_ways(as.integer(n), as.integer(n_G))
}
if(is.null(Type_3_min_samplesize)){
min_sampleSize <- ceiling(n/(n_G*2))
mat <- mat[apply(mat,1,function(x) all(x >= min_sampleSize)),]
}else{
min_sampleSize <- c(rep(ceiling(n/(n_G*2)), (n_G-1)), Type_3_min_samplesize)
mat <- mat[apply(mat,1,function(x) all(x >= min_sampleSize)),]
}
Comb <- cbind(0, mat)
Comb <- t(apply(Comb, 1, cumsum))
OUT <- leastSqrRegression(Floods_R$HQ_dir, Floods_R$dir_Volume, Comb, intercept_zero = TRUE)
R2_mat <- OUT[[3]]
r2_sums <- rowSums(R2_mat) #r^2 innerhalb Unterteilungen addieren
optlen <- mat[which.max(r2_sums),] # welche Unterteilung gibt das max. r^2?
opt_R2 <- R2_mat[which.max(r2_sums),]
opt_slope <- OUT[[2]][which.max(r2_sums),]
optind <- cumsum(c(1, optlen))
cut_labz <- cut(1:nrow(Floods_R),optind,include.lowest = TRUE)
Floods_R$Typ <- factor(cut_labz, labels =  paste0("R", 1:n_G))
#Schnee Ereignisse
Floods_S <- Floods_all[SM_rel>=0.2,][,Typ:=factor(NA,levels = c("S1","S2"))]
if(nrow(Floods_S) > 2){
cluster_daten <- Floods_S[,.(Sum_N, Sum_SM, PSI_SM)]
cluster_daten <- cluster_daten  # [1:(nrow(cluster_daten)-3)]
if(!is.null(R_Seed)) set.seed(R_Seed)
types <- kmeans(cluster_daten, centers=2)
Floods_S$Typ <- paste0("S", types$cluster)
G <- Floods_S[,.(Mean_N=mean(Sum_N), Mean_SM=mean(Sum_SM), mean_PSI = mean(PSI_SM)),by=Typ]
statz <- apply(as.matrix(G[,.(Mean_N, Mean_SM, mean_PSI)]),2, function(x) which.min(x))
if(sum(statz==1)>=1 & G$Typ[1] =="S2") Floods_S$Typ <- fifelse(Floods_S$Typ=="S1","S2","S1")
}
Floods_res <- rbind(Floods_R,Floods_S)[order(Begin)]
Floods_all_ref <- merge(Floods_all_ref, Floods_res[,.(Typ, ID)], by="ID", all.x=TRUE,sort=FALSE)[order(Begin)]
Floods_all_ref <- Floods_all_ref[,-"ID"]
return(Floods_all_ref)
}
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
source('D:/Packages/FloodR/R/Flood_Typing.R', encoding = 'UTF-8')
source('D:/Packages/FloodR/R/Flood_Typing.R', encoding = 'UTF-8')
devtools::build_manual()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/Miktex/miktex/bin/x64/",sep=";"))
devtools::build_manual()
library(FloodR)
data("Sample_Flood_events")
data("Sample_Flood_events")
head(Sample_Flood_events)
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
Type_3_min_samplesize = 10, R_Seed = 9999)
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
Floods
str(Floods)
str(Floods_all)
Floods_all
print(Floods_all)
library(FloodR)
data("Sample_Flood_events")
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
is.data.table(x = Floods_all)
library(FloodR)
data("Sample_Flood_events")
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
devtools::document()
library(FloodR)
data("Sample_Flood_events")
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
library(FloodR)
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
data("Sample_Flood_events")
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
devtools::build_manual()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/Miktex/miktex/bin/x64/",sep=";"))
devtools::build_manual()
library(FloodR)
data("Sample_Flood_events")
head(Sample_Flood_events)
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
table(Floods_typed$Typ)
plot(Floods_typed$dir_Volume, Floods_typed$HQ_dir, col = Floods_typed$Typ)
Floods_Rain <- Floods_typed[Floods_typed$Typ %in% c("R1", "R2", "R3"),]
plot(Floods_Rain$dir_Volume, Floods_Rain$HQ_dir, col = Floods_Rain$Typ)
colz <- c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"
library(ggplot2)
ggplot(Floods_Rain)+
geom_points(x=dir_Volume, y=HQ_dir, colour=Typ)+
scale_colour_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
ggplot(Floods_Rain)+
geom_point(x=dir_Volume, y=HQ_dir, colour=Typ)+
scale_colour_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
Floods_Rain
ggplot(Floods_Rain)+
geom_point(aes(x=dir_Volume, y=HQ_dir, colour=Typ))+
scale_colour_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
dailyMQ<-data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
discharge=rbeta(1462,2,20)*100)
Flood_events <- eventsep(dailyMQ, monthlyHQ)
monthlyHQ
monthlyHQ<-data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="months"),
discharge=dailyMQ$discharge[(0:48)*12+1]+rnorm(49,5,1))
Flood_events <- eventsep(dailyMQ, monthlyHQ)
Flood_events
head(Flood_events)
Discharge <-list(A=data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
discharge=rbeta(1462,2,20)*100),
B=data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
discharge=rbeta(1462,2,20)*100))
Catchment_Properties <-data.frame(Name=c("A","B"),Area=c(10,100),
Height=c(100,1000),stringsAsFactors = FALSE)
Run_WebFlood(Discharge,Precipitation,Catchment_Properties)
Precipitation <-list(A=data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
prec=rbeta(1462,2,20)*100),
B=data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
prec=rbeta(1462,2,20)*100))
Run_WebFlood(Discharge,Precipitation,Catchment_Properties)
Discharge <-list(A=data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
discharge=rbeta(1462,2,20)*100),
B=data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
discharge=rbeta(1462,2,20)*100))
Catchment_Properties <-data.frame(Name=c("A","B"), Area=c(10,100),
Height=c(100,1000), stringsAsFactors = FALSE)
Run_WebFlood(Discharge, Precipitation, Catchment_Properties)
Run_WebFlood()
rm -Rf C:/Users/buehler/AppData/Local/Temp/Rtmp4qGOZi/Rd2pdf90869361e3a
library(FloodR)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("tinytex")
tools::texi2pdf()
tools::texi2pdf(file = "D:/Packages/FloodR.Rcheck/FloodR-manual.tex")
tools::texi2dvi(file = "D:/Packages/FloodR.Rcheck/FloodR-manual.tex")
devtools::build_manual()
library(FloodR)
library("FloodR")
monthlyHQ <- data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="months"),
discharge=dailyMQ$discharge[(0:48)*12+1]+rnorm(49,5,1))
dailyMQ <- data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="days"),
discharge=rbeta(1462,2,20)*100)
monthlyHQ <- data.frame(Date=seq(from=as.Date("01.01.2000", format="%d.%m.%Y"),
to=as.Date("01.01.2004", format="%d.%m.%Y"), by="months"),
discharge=dailyMQ$discharge[(0:48)*12+1]+rnorm(49,5,1))
Flood_events <- eventsep(dailyMQ, monthlyHQ)
head(Flood_events)
# Run the Web separation on the dummy Catchment
Run_WebFlood()
# Open the Data
data("Sample_Flood_events")
head(Sample_Flood_events)
head(Sample_Flood_events)
# Type the floods
Floods_typed <- make_typing_of_floods(Floods = Sample_Flood_events, n_G = 3, fast_composition = FALSE,
Type_3_min_samplesize = 10, R_Seed = 9999)
table(Floods_typed$Typ)
Floods_Rain <- Floods_typed[Floods_typed$Typ %in% c("R1", "R2", "R3"),]
library(ggplot2)
library(ggplot2)
ggplot(Floods_Rain)+
geom_point(aes(x=dir_Volume, y=HQ_dir, colour=Typ))+
scale_colour_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
ggplot(Floods_Rain)+
geom_point(aes(x=dir_Volume, y=HQ_dir, fill=Typ), colour="black", shape=21)+
scale_fill_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
ggplot(Floods_Rain)+
geom_point(aes(x=dir_Volume, y=HQ_dir, fill=Typ), colour="black", shape=21, size=1)+
scale_fill_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
ggplot(Floods_Rain)+
geom_point(aes(x=dir_Volume, y=HQ_dir, fill=Typ), colour="black", shape=21, size=1.4)+
scale_fill_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
ggplot(Floods_Rain)+
geom_point(aes(x=dir_Volume, y=HQ_dir, fill=Typ), colour="black", shape=21, size=2)+
scale_fill_manual(values = c("R1"="#D7191C", "R2"="#FDAE61", "R3"= "#1A9641"))
table(Floods_typed$Typ)
head(Sample_Flood_events)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
library(FloodR)
